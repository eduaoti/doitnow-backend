name: CI/CD - Backend (Tests, Build, Deploy)

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  test:
    name: Ejecutar pruebas backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - run: npm ci
      - run: npm test --if-present

  deploy:
    name: Desplegar backend en Azure (App Service, sin ACI)
    needs: test
    runs-on: ubuntu-latest

    env:
      # ===== Azure / ACR =====
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      ACR_NAME:         ${{ secrets.ACR_NAME }}
      RG:               ${{ secrets.AZURE_RESOURCE_GROUP }}
      LOCATION:         ${{ secrets.AZURE_LOCATION }}

      # ===== Imagen =====
      IMAGE_NAME: doinow-backend
      IMAGE_TAG:  ${{ github.sha }}

      # ===== Vars de la app =====
      MONGO_URI:        ${{ secrets.MONGO_URI }}
      JWT_SECRET:       ${{ secrets.JWT_SECRET }}
      MAIL_USER:        ${{ secrets.MAIL_USER }}
      MAIL_PASS:        ${{ secrets.MAIL_PASS }}
      FRONTEND_ORIGIN:  ${{ secrets.FRONTEND_ORIGIN }}
      NODE_ENV:         production

      # ===== App Service (HTTPS) =====
      APP_SERVICE_PLAN: ${{ secrets.APP_SERVICE_PLAN }}
      WEBAPP_NAME:      ${{ secrets.WEBAPP_NAME }}

      # ===== Observabilidad (AI) =====
      APPLICATIONINSIGHTS_CONNECTION_STRING: ${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING }}
      APPINSIGHTS_CONNECTIONSTRING:          ${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING }}

      # ===== Docker Hub (opcional) =====
      DOCKERHUB_REPO: doinow-backend

    steps:
      - uses: actions/checkout@v4

      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Validar sesión
        run: az account show

      - name: Login a ACR (RBAC)
        run: az acr login -n "$ACR_NAME"

      - name: Build & Push Backend (ACR)
        run: |
          docker build --platform linux/amd64 -t $ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG .
          docker push $ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG

      - name: Docker Hub login (skip si no hay secrets)
        run: |
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          else
            echo "No DOCKERHUB_USERNAME/DOCKERHUB_TOKEN; skipping Docker Hub login."
          fi

      - name: Push a Docker Hub (skip si no hay secrets)
        run: |
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            DH_REPO="${{ secrets.DOCKERHUB_USERNAME }}/${DOCKERHUB_REPO}"
            docker tag $ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG $DH_REPO:${GITHUB_SHA::7}
            docker tag $ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG $DH_REPO:latest
            docker push $DH_REPO:${GITHUB_SHA::7}
            docker push $DH_REPO:latest
          else
            echo "No Docker Hub secrets; skipping push."
          fi

      # ---------- APP SERVICE (HTTPS) ----------
      - name: Asegurar provider Microsoft.Web registrado
        run: |
          for i in {1..40}; do
            state=$(az provider show -n Microsoft.Web --query registrationState -o tsv || echo "Unknown")
            echo "Microsoft.Web registrationState=$state"
            [ "$state" = "Registered" ] && exit 0
            sleep 5
          done
          echo "Timeout esperando Microsoft.Web=Registered"; exit 1

      - name: Crear/usar App Service Plan (Linux)
        run: |
          PLAN="${APP_SERVICE_PLAN:-doinow-plan-back}"
          az appservice plan show -g "$RG" -n "$PLAN" \
          || az appservice plan create -g "$RG" -n "$PLAN" --is-linux --sku B1 --location "$LOCATION"
          echo "APP_SERVICE_PLAN=$PLAN" >> $GITHUB_ENV

      - name: Crear/usar Web App for Containers
        run: |
          PLAN="$APP_SERVICE_PLAN"
          WN="${WEBAPP_NAME}"
          if [ -z "$WN" ]; then
            WN="doinow-back-${GITHUB_RUN_NUMBER}-${GITHUB_RUN_ATTEMPT}"
          fi
          WN=$(echo "$WN" | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9-')
          echo "Usando WEBAPP_NAME=$WN"

          if ! az webapp show -g "$RG" -n "$WN" >/dev/null 2>&1; then
            az webapp create -g "$RG" -p "$PLAN" -n "$WN" \
              --deployment-container-image-name "$ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG"
          fi

          az webapp config container set -g "$RG" -n "$WN" \
            --docker-custom-image-name "$ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG" \
            --docker-registry-server-url "https://$ACR_LOGIN_SERVER" \
            --docker-registry-server-user "${{ secrets.ACR_USERNAME }}" \
            --docker-registry-server-password "${{ secrets.ACR_PASSWORD }}"

          az webapp config appsettings set -g "$RG" -n "$WN" \
            --settings WEBSITES_PORT=3000 \
                      PORT=3000 \
                      USE_HTTPS=false \
                      NODE_ENV=production \
                      MONGO_URI="$MONGO_URI" \
                      JWT_SECRET="$JWT_SECRET" \
                      MAIL_USER="$MAIL_USER" \
                      MAIL_PASS="$MAIL_PASS" \
                      FRONTEND_ORIGIN="${FRONTEND_ORIGIN}" \
                      APPLICATIONINSIGHTS_CONNECTION_STRING="$APPLICATIONINSIGHTS_CONNECTION_STRING" \
                      APPINSIGHTS_CONNECTIONSTRING="$APPLICATIONINSIGHTS_CONNECTION_STRING"

          echo "WEBAPP_NAME=$WN" >> $GITHUB_ENV

      - name: Reiniciar Web App
        run: az webapp restart -g "$RG" -n "$WEBAPP_NAME"

      - name: Healthcheck Web App (HTTPS)
        run: |
          HOST=$(az webapp show -g "$RG" -n "$WEBAPP_NAME" --query defaultHostName -o tsv)
          echo "Probando https://${HOST}/health"
          for i in {1..24}; do
            if curl -fsS --max-time 5 "https://${HOST}/health"; then
              echo "Health OK (Web App)"; exit 0
            fi
            echo "Aún no responde, reintento $i/24..."
            sleep 5
          done
          echo "Healthcheck Web App falló"; exit 1

      - name: Mostrar URL HTTPS del Backend
        run: |
          HOST=$(az webapp show -g "$RG" -n "$WEBAPP_NAME" --query defaultHostName -o tsv)
          echo "Backend HTTPS: https://${HOST}"
          echo "Usa esta URL en tu frontend (.env.production => VITE_API_BASE_URL y VITE_UPLOADS_BASE_URL)"
