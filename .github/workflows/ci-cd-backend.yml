name: CI/CD - Backend (Tests, Build, Deploy)

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  test:
    name: Ejecutar pruebas backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - run: npm ci
      - run: npm test --if-present

  deploy:
    name: Desplegar backend en Azure
    needs: test
    runs-on: ubuntu-latest

    env:
      # ===== Azure / ACR =====
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      ACR_NAME:         ${{ secrets.ACR_NAME }}
      RG:               ${{ secrets.AZURE_RESOURCE_GROUP }}
      LOCATION:         ${{ secrets.AZURE_LOCATION }}

      # ===== Imagen =====
      IMAGE_NAME: doinow-backend
      IMAGE_TAG:  ${{ github.sha }}

      # ===== Vars de la app =====
      MONGO_URI:        ${{ secrets.MONGO_URI }}
      JWT_SECRET:       ${{ secrets.JWT_SECRET }}
      MAIL_USER:        ${{ secrets.MAIL_USER }}
      MAIL_PASS:        ${{ secrets.MAIL_PASS }}
      FRONTEND_ORIGIN:  ${{ secrets.FRONTEND_ORIGIN }}
      NODE_ENV:         production

      # ===== App Service (HTTPS) =====
      APP_SERVICE_PLAN: ${{ secrets.APP_SERVICE_PLAN }}
      WEBAPP_NAME:      ${{ secrets.WEBAPP_NAME }}

      # ===== Docker Hub (opcional) =====
      DOCKERHUB_REPO: doinow-backend

      # ===== Observabilidad / Logs =====
      LOG_ANALYTICS_WORKSPACE_ID:   ${{ secrets.LOG_ANALYTICS_WORKSPACE_ID }}
      LOG_ANALYTICS_WORKSPACE_KEY:  ${{ secrets.LOG_ANALYTICS_WORKSPACE_KEY }}
      APPINSIGHTS_CONNECTIONSTRING: ${{ secrets.APPINSIGHTS_CONNECTIONSTRING }}

    steps:
      - uses: actions/checkout@v4

      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Validar sesión
        run: az account show

      # ---------- NOMBRES ÚNICOS PARA ACI ----------
      - name: Definir nombres únicos (ACI)
        run: |
          SHORT_SHA="${GITHUB_SHA::7}"
          CN="doinow-back-${SHORT_SHA}-${GITHUB_RUN_NUMBER}"
          DNS_LABEL="$(echo "doinow-back-${SHORT_SHA}-${GITHUB_RUN_NUMBER}" | tr '[:upper:]' '[:lower:]' | cut -c1-60)"
          echo "CONTAINER_NAME=${CN}" >> $GITHUB_ENV
          echo "DNS_LABEL=${DNS_LABEL}" >> $GITHUB_ENV
          echo "Usando CONTAINER_NAME=${CN} y DNS_LABEL=${DNS_LABEL}"

      - name: Login a ACR (RBAC)
        run: az acr login -n "$ACR_NAME"

      - name: Build & Push Backend (ACR)
        run: |
          docker build --platform linux/amd64 -t $ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG .
          docker push $ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG

      - name: Docker Hub login (skip si no hay secrets)
        run: |
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          else
            echo "No DOCKERHUB_USERNAME/DOCKERHUB_TOKEN; skipping Docker Hub login."
          fi

      - name: Push a Docker Hub (skip si no hay secrets)
        run: |
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            DH_REPO="${{ secrets.DOCKERHUB_USERNAME }}/${DOCKERHUB_REPO}"
            docker tag $ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG $DH_REPO:${GITHUB_SHA::7}
            docker tag $ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG $DH_REPO:latest
            docker push $DH_REPO:${GITHUB_SHA::7}
            docker push $DH_REPO:latest
          else
            echo "No Docker Hub secrets; skipping push."
          fi

      # ---------- LIMPIEZA ACI ANTIGUOS (liberar cuota) ----------
      - name: Limpiar ACI anteriores (prefijo doinow-back-)
        run: |
          OLD=$(az container list -g "$RG" --query "[?starts_with(name, 'doinow-back-') && name!='$CONTAINER_NAME'].name" -o tsv)
          if [ -n "$OLD" ]; then
            echo "Eliminando ACI antiguos:"
            echo "$OLD" | xargs -I {} az container delete -g "$RG" -n {} -y || true
          else
            echo "No hay ACI antiguos para borrar."
          fi

      # ---------- ACI (HTTP) + LOG ANALYTICS con retry ----------
      - name: Deploy to Azure Container Instances (HTTP + Logs) con retry si cuota
        run: |
          set -e
          attempt_create() {
            az container create \
              --resource-group "$RG" \
              --name "$CONTAINER_NAME" \
              --image "$ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG" \
              --dns-name-label "${DNS_LABEL}" \
              --location "$LOCATION" \
              --ports 3000 \
              --os-type Linux \
              --cpu 1 \
              --memory 2.0 \
              --environment-variables \
                PORT=3000 \
                USE_HTTPS=false \
                NODE_ENV="$NODE_ENV" \
                MONGO_URI="$MONGO_URI" \
                JWT_SECRET="$JWT_SECRET" \
                MAIL_USER="$MAIL_USER" \
                MAIL_PASS="$MAIL_PASS" \
                FRONTEND_ORIGIN="${FRONTEND_ORIGIN:-*}" \
                APPINSIGHTS_CONNECTIONSTRING="$APPINSIGHTS_CONNECTIONSTRING" \
              --registry-login-server "$ACR_LOGIN_SERVER" \
              --registry-username "${{ secrets.ACR_USERNAME }}" \
              --registry-password "${{ secrets.ACR_PASSWORD }}" \
              --restart-policy Always \
              --log-analytics-workspace "$LOG_ANALYTICS_WORKSPACE_ID" \
              --log-analytics-workspace-key "$LOG_ANALYTICS_WORKSPACE_KEY"
          }

          set +e
          attempt_create
          RC=$?
          if [ $RC -ne 0 ]; then
            echo "Primera creación falló, intentando detectar si es por cuota..."
            if az container list-usage --location "$LOCATION" --output tsv 2>/dev/null | grep -qi "StandardCores"; then
              echo "Uso de cores en región:"
              az container list-usage --location "$LOCATION" -o table || true
            fi
            # Si fue por quota, intenta limpiar todo lo que tenga el prefijo y reintenta
            echo "Forzando limpieza adicional por si quedan grupos huérfanos..."
            az container list -g "$RG" --query "[?starts_with(name, 'doinow-back-')].name" -o tsv | xargs -I {} az container delete -g "$RG" -n {} -y || true
            echo "Reintentando creación..."
            attempt_create
            RC=$?
          fi
          set -e
          if [ $RC -ne 0 ]; then
            echo "Fallo creando el ACI tras retry."
            exit $RC
          fi

      - name: Mostrar estado ACI (HTTP)
        run: |
          az container show -g "$RG" -n "$CONTAINER_NAME" \
            --query "{FQDN:ipAddress.fqdn,State:instanceView.state,Ports:ipAddress.ports}" -o table

      - name: Esperar a que ACI esté Running (timeout ~2m)
        run: |
          for i in {1..24}; do
            ST=$(az container show -g "$RG" -n "$CONTAINER_NAME" --query instanceView.state -o tsv || echo "Unknown")
            echo "Estado actual: $ST"
            if [ "$ST" = "Running" ]; then break; fi
            sleep 5
          done
          if [ "$ST" != "Running" ]; then
            echo "ACI no llegó a Running"; exit 1
          fi

      - name: Probar /health (puerto 3000)
        run: |
          FQDN=$(az container show -g "$RG" -n "$CONTAINER_NAME" --query ipAddress.fqdn -o tsv)
          echo "FQDN: $FQDN"
          for i in {1..12}; do
            if curl -fsS --max-time 5 "http://$FQDN:3000/health"; then
              echo "Health OK"
              exit 0
            fi
            echo "Aún no responde, reintento $i/12..."
            sleep 5
          done
          echo "Healthcheck falló"
          exit 1

      # ---------- DIAGNÓSTICO SI FALLA ACI ----------
      - name: Diagnóstico ACI (events + logs) si falla
        if: failure()
        run: |
          echo "=== ACI STATE ==="
          az container show -g "$RG" -n "$CONTAINER_NAME" \
            --query "{State:instanceView.state,Prov:provisioningState,Ports:ipAddress.ports}" -o table || true

          echo "=== ACI EVENTS ==="
          az container show -g "$RG" -n "$CONTAINER_NAME" \
            --query "containers[0].instanceView.events" || true

          echo "=== ACI LOGS (tail) ==="
          az container logs -g "$RG" -n "$CONTAINER_NAME" || true

      # ---------- APP SERVICE (HTTPS externo, HTTP interno) ----------
      - name: Esperar a que Microsoft.Web esté Registered
        run: |
          for i in {1..40}; do
            state=$(az provider show -n Microsoft.Web --query registrationState -o tsv || echo "Unknown")
            echo "Microsoft.Web registrationState=$state"
            if [ "$state" = "Registered" ]; then exit 0; fi
            sleep 5
          done
          echo "Timeout esperando Microsoft.Web=Registered"; exit 1

      - name: Crear/usar App Service Plan (Linux)
        run: |
          PLAN="${APP_SERVICE_PLAN:-doinow-plan-back}"
          az appservice plan show -g "$RG" -n "$PLAN" \
          || az appservice plan create -g "$RG" -n "$PLAN" --is-linux --sku B1 --location "$LOCATION"
          echo "APP_SERVICE_PLAN=$PLAN" >> $GITHUB_ENV

      - name: Crear/usar Web App for Containers (nombre único si no hay secret)
        run: |
          PLAN="$APP_SERVICE_PLAN"
          WN="${WEBAPP_NAME}"
          if [ -z "$WN" ]; then
            WN="doinow-back-${GITHUB_RUN_NUMBER}-${GITHUB_RUN_ATTEMPT}"
          fi
          WN=$(echo "$WN" | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9-')
          echo "Usando WEBAPP_NAME=$WN"

          if ! az webapp show -g "$RG" -n "$WN" >/dev/null 2>&1; then
            az webapp create -g "$RG" -p "$PLAN" -n "$WN" \
              --deployment-container-image-name "$ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG"
          fi

          az webapp config container set -g "$RG" -n "$WN" \
            --docker-custom-image-name "$ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG" \
            --docker-registry-server-url "https://$ACR_LOGIN_SERVER" \
            --docker-registry-server-user "${{ secrets.ACR_USERNAME }}" \
            --docker-registry-server-password "${{ secrets.ACR_PASSWORD }}"

          az webapp config appsettings set -g "$RG" -n "$WN" \
            --settings WEBSITES_PORT=3000 \
                      PORT=3000 \
                      USE_HTTPS=false \
                      NODE_ENV=production \
                      MONGO_URI="$MONGO_URI" \
                      JWT_SECRET="$JWT_SECRET" \
                      MAIL_USER="$MAIL_USER" \
                      MAIL_PASS="$MAIL_PASS" \
                      FRONTEND_ORIGIN="${FRONTEND_ORIGIN}" \
                      APPINSIGHTS_CONNECTIONSTRING="$APPINSIGHTS_CONNECTIONSTRING" \
                      APPLICATIONINSIGHTS_CONNECTION_STRING="$APPINSIGHTS_CONNECTIONSTRING"

          echo "WEBAPP_NAME=$WN" >> $GITHUB_ENV

      - name: Reiniciar Web App
        run: az webapp restart -g "$RG" -n "$WEBAPP_NAME"

      - name: Mostrar URL HTTPS del Backend
        run: |
          HOST=$(az webapp show -g "$RG" -n "$WEBAPP_NAME" --query defaultHostName -o tsv)
          echo "Backend HTTPS: https://${HOST}"
          echo "Usa esta URL en tu frontend (.env.production => VITE_API_BASE_URL y VITE_UPLOADS_BASE_URL)"
