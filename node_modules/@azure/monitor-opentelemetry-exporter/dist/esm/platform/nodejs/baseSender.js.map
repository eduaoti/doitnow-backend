{"version":3,"file":"baseSender.js","sourceRoot":"","sources":["../../../../src/platform/nodejs/baseSender.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { diag } from \"@opentelemetry/api\";\nimport type { PersistentStorage, SenderResult } from \"../../types.js\";\nimport type { AzureMonitorExporterOptions } from \"../../config.js\";\nimport { FileSystemPersist } from \"./persist/index.js\";\nimport type { ExportResult } from \"@opentelemetry/core\";\nimport { ExportResultCode } from \"@opentelemetry/core\";\nimport { NetworkStatsbeatMetrics } from \"../../export/statsbeat/networkStatsbeatMetrics.js\";\nimport { LongIntervalStatsbeatMetrics } from \"../../export/statsbeat/longIntervalStatsbeatMetrics.js\";\nimport type { RestError } from \"@azure/core-rest-pipeline\";\nimport {\n  DropCode,\n  RetryCode,\n  MAX_STATSBEAT_FAILURES,\n  isStatsbeatShutdownStatus,\n} from \"../../export/statsbeat/types.js\";\nimport type { BreezeResponse } from \"../../utils/breezeUtils.js\";\nimport { isRetriable } from \"../../utils/breezeUtils.js\";\nimport type { TelemetryItem as Envelope } from \"../../generated/index.js\";\nimport {\n  ENV_APPLICATIONINSIGHTS_STATSBEAT_ENABLED_PREVIEW,\n  RetriableRestErrorTypes,\n} from \"../../Declarations/Constants.js\";\nimport { CustomerStatsbeatMetrics } from \"../../export/statsbeat/customerStatsbeat.js\";\n\nconst DEFAULT_BATCH_SEND_RETRY_INTERVAL_MS = 60_000;\n\n/**\n * Base sender class\n * @internal\n */\nexport abstract class BaseSender {\n  private readonly persister: PersistentStorage;\n  private numConsecutiveRedirects: number;\n  private retryTimer: NodeJS.Timeout | null;\n  private networkStatsbeatMetrics: NetworkStatsbeatMetrics | undefined;\n  private customerStatsbeatMetrics: CustomerStatsbeatMetrics | undefined;\n  private longIntervalStatsbeatMetrics;\n  private statsbeatFailureCount: number = 0;\n  private batchSendRetryIntervalMs: number = DEFAULT_BATCH_SEND_RETRY_INTERVAL_MS;\n  private isStatsbeatSender: boolean;\n  private disableOfflineStorage: boolean;\n\n  constructor(options: {\n    endpointUrl: string;\n    instrumentationKey: string;\n    trackStatsbeat: boolean;\n    exporterOptions: AzureMonitorExporterOptions;\n    aadAudience?: string;\n    isStatsbeatSender?: boolean;\n  }) {\n    this.numConsecutiveRedirects = 0;\n    this.disableOfflineStorage = options.exporterOptions.disableOfflineStorage || false;\n    if (options.trackStatsbeat) {\n      this.networkStatsbeatMetrics = NetworkStatsbeatMetrics.getInstance({\n        instrumentationKey: options.instrumentationKey,\n        endpointUrl: options.endpointUrl,\n        disableOfflineStorage: this.disableOfflineStorage,\n      });\n      this.longIntervalStatsbeatMetrics = LongIntervalStatsbeatMetrics.getInstance({\n        instrumentationKey: options.instrumentationKey,\n        endpointUrl: options.endpointUrl,\n        disableOfflineStorage: this.disableOfflineStorage,\n      });\n      if (process.env[ENV_APPLICATIONINSIGHTS_STATSBEAT_ENABLED_PREVIEW]) {\n        this.customerStatsbeatMetrics = CustomerStatsbeatMetrics.getInstance({\n          instrumentationKey: options.instrumentationKey,\n          endpointUrl: options.endpointUrl,\n          disableOfflineStorage: this.disableOfflineStorage,\n        });\n      }\n    }\n    this.persister = new FileSystemPersist(\n      options.instrumentationKey,\n      options.exporterOptions,\n      this.customerStatsbeatMetrics,\n    );\n    this.retryTimer = null;\n    this.isStatsbeatSender = options.isStatsbeatSender || false;\n  }\n\n  abstract send(payload: unknown[]): Promise<SenderResult>;\n  abstract shutdown(): Promise<void>;\n  abstract handlePermanentRedirect(location: string | undefined): void;\n\n  /**\n   * Export envelopes\n   */\n  public async exportEnvelopes(envelopes: Envelope[]): Promise<ExportResult> {\n    diag.info(`Exporting ${envelopes.length} envelope(s)`);\n\n    if (envelopes.length < 1) {\n      return { code: ExportResultCode.SUCCESS };\n    }\n\n    try {\n      const startTime = new Date().getTime();\n      const { result, statusCode } = await this.send(envelopes);\n      const endTime = new Date().getTime();\n      const duration = endTime - startTime;\n      this.numConsecutiveRedirects = 0;\n\n      if (statusCode === 200) {\n        // Success -- @todo: start retry timer\n        if (!this.retryTimer) {\n          this.retryTimer = setTimeout(() => {\n            this.retryTimer = null;\n            this.sendFirstPersistedFile();\n          }, this.batchSendRetryIntervalMs);\n          this.retryTimer.unref();\n        }\n        // If we are not exporting statsbeat and statsbeat is not disabled -- count success\n        if (!this.isStatsbeatSender) {\n          this.networkStatsbeatMetrics?.countSuccess(duration);\n          this.customerStatsbeatMetrics?.countSuccessfulItems(envelopes);\n        }\n        return { code: ExportResultCode.SUCCESS };\n      } else if (statusCode && isRetriable(statusCode)) {\n        // Failed -- persist failed data\n        if (statusCode === 429 || statusCode === 439) {\n          if (!this.isStatsbeatSender) {\n            this.networkStatsbeatMetrics?.countThrottle(statusCode);\n            this.customerStatsbeatMetrics?.countRetryItems(envelopes, statusCode);\n          }\n          return {\n            code: ExportResultCode.SUCCESS,\n          };\n        }\n        if (result) {\n          diag.info(result);\n          const breezeResponse = JSON.parse(result) as BreezeResponse;\n          const filteredEnvelopes: Envelope[] = [];\n          // Create a list of successful envelopes by filtering out the failed ones for customer statsbeat\n          const successfulEnvelopes: Envelope[] = [...envelopes];\n\n          // If we have a partial success, count the succeeded envelopes\n          if (breezeResponse.itemsAccepted > 0 && statusCode === 206 && !this.isStatsbeatSender) {\n            this.networkStatsbeatMetrics?.countSuccess(duration);\n          }\n          // Figure out if we need to either retry or count failures\n          if (breezeResponse.errors) {\n            breezeResponse.errors.forEach((error) => {\n              // Mark as undefined so we don't process them in countSuccessfulEnvelopes\n              successfulEnvelopes[error.index] = undefined as unknown as Envelope;\n\n              // Add to retry list if status code is retriable\n              if (error.statusCode && isRetriable(error.statusCode)) {\n                filteredEnvelopes.push(envelopes[error.index]);\n              }\n            });\n          }\n\n          // If we have a partial success, count the succeeded envelopes\n          if (breezeResponse.itemsAccepted > 0) {\n            // Count only the successful envelopes (non-undefined)\n            if (!this.isStatsbeatSender) {\n              this.networkStatsbeatMetrics?.countSuccess(duration);\n              this.customerStatsbeatMetrics?.countSuccessfulItems(envelopes);\n            }\n          }\n          if (filteredEnvelopes.length > 0) {\n            if (!this.isStatsbeatSender) {\n              this.networkStatsbeatMetrics?.countRetry(statusCode);\n              this.customerStatsbeatMetrics?.countRetryItems(envelopes, statusCode);\n            }\n            // calls resultCallback(ExportResult) based on result of persister.push\n            return await this.persist(filteredEnvelopes);\n          }\n          // Failed -- not retriable\n          if (!this.isStatsbeatSender) {\n            this.networkStatsbeatMetrics?.countFailure(duration, statusCode);\n            // Count dropped items for customer statsbeat for non-retriable status codes\n            this.customerStatsbeatMetrics?.countDroppedItems(\n              successfulEnvelopes.filter(Boolean),\n              statusCode,\n            );\n          }\n          return {\n            code: ExportResultCode.FAILED,\n          };\n        } else {\n          // calls resultCallback(ExportResult) based on result of persister.push\n          if (!this.isStatsbeatSender) {\n            this.networkStatsbeatMetrics?.countRetry(statusCode);\n            this.customerStatsbeatMetrics?.countRetryItems(envelopes, statusCode);\n          }\n          return await this.persist(envelopes);\n        }\n      } else {\n        // Failed -- not retriable\n        if (this.networkStatsbeatMetrics && !this.isStatsbeatSender) {\n          if (statusCode) {\n            this.networkStatsbeatMetrics.countFailure(duration, statusCode);\n            this.customerStatsbeatMetrics?.countDroppedItems(envelopes, statusCode);\n          }\n        } else {\n          // Handles all other status codes or client exceptions for Statsbeat\n          this.incrementStatsbeatFailure();\n          this.customerStatsbeatMetrics?.countDroppedItems(envelopes, DropCode.CLIENT_EXCEPTION);\n        }\n        return {\n          code: ExportResultCode.FAILED,\n        };\n      }\n    } catch (error: any) {\n      const restError = error as RestError;\n      if (\n        restError.statusCode &&\n        (restError.statusCode === 307 || // Temporary redirect\n          restError.statusCode === 308)\n      ) {\n        // Permanent redirect\n        this.numConsecutiveRedirects++;\n        // To prevent circular redirects\n        if (this.numConsecutiveRedirects < 10) {\n          if (restError.response && restError.response.headers) {\n            const location = restError.response.headers.get(\"location\");\n            if (location) {\n              // Update sender URL\n              this.handlePermanentRedirect(location);\n              // Send to redirect endpoint as HTTPs library doesn't handle redirect automatically\n              return this.exportEnvelopes(envelopes);\n            }\n          }\n        } else {\n          const redirectError = new Error(\"Circular redirect\");\n          if (!this.isStatsbeatSender) {\n            this.networkStatsbeatMetrics?.countException(redirectError);\n            this.customerStatsbeatMetrics?.countDroppedItems(\n              envelopes,\n              DropCode.CLIENT_EXCEPTION,\n              redirectError.message,\n            );\n          }\n          return { code: ExportResultCode.FAILED, error: redirectError };\n        }\n      } else if (\n        restError.statusCode &&\n        isRetriable(restError.statusCode) &&\n        !this.isStatsbeatSender\n      ) {\n        this.networkStatsbeatMetrics?.countRetry(restError.statusCode);\n        this.customerStatsbeatMetrics?.countRetryItems(envelopes, restError.statusCode);\n        return this.persist(envelopes);\n      } else if (\n        restError.statusCode === 400 &&\n        restError.message.includes(\"Invalid instrumentation key\")\n      ) {\n        // Invalid instrumentation key, shutdown statsbeat, fail silently\n        this.shutdownStatsbeat();\n        return { code: ExportResultCode.SUCCESS };\n      } else if (\n        restError.statusCode &&\n        this.isStatsbeatSender &&\n        isStatsbeatShutdownStatus(restError.statusCode)\n      ) {\n        // If the status code is a shutdown status code for statsbeat, shutdown statsbeat and fail silently\n        this.incrementStatsbeatFailure();\n        return { code: ExportResultCode.SUCCESS };\n      }\n\n      // For retriable REST errors\n      if (this.isRetriableRestError(restError) && !this.isStatsbeatSender) {\n        if (this.customerStatsbeatMetrics?.isTimeoutError(restError) && !this.isStatsbeatSender) {\n          this.customerStatsbeatMetrics?.countRetryItems(\n            envelopes,\n            RetryCode.CLIENT_TIMEOUT,\n            \"timeout_exception\",\n          );\n          diag.error(\"Request timed out. Error message:\", restError.message);\n        } else if (restError.statusCode) {\n          this.networkStatsbeatMetrics?.countRetry(restError.statusCode);\n          this.customerStatsbeatMetrics?.countRetryItems(envelopes, restError.statusCode);\n        }\n        diag.error(\n          \"Retrying due to transient client side error. Error message:\",\n          restError.message,\n        );\n        return this.persist(envelopes);\n      }\n      // For non-retriable REST errors or client exceptions\n      if (!this.isStatsbeatSender) {\n        this.networkStatsbeatMetrics?.countException(restError);\n        diag.error(\n          \"Envelopes could not be exported and are not retriable. Error message:\",\n          restError.message,\n        );\n      }\n      return { code: ExportResultCode.FAILED, error: restError };\n    }\n  }\n\n  /**\n   * Persist envelopes to disk\n   */\n  private async persist(envelopes: unknown[]): Promise<ExportResult> {\n    try {\n      const success = await this.persister.push(envelopes);\n      return success\n        ? { code: ExportResultCode.SUCCESS }\n        : {\n            code: ExportResultCode.FAILED,\n            error: new Error(\"Failed to persist envelope in disk.\"),\n          };\n    } catch (ex: any) {\n      if (!this.isStatsbeatSender) {\n        this.networkStatsbeatMetrics?.countWriteFailure();\n        if (this.disableOfflineStorage && envelopes) {\n          this.customerStatsbeatMetrics?.countDroppedItems(\n            envelopes as Envelope[],\n            DropCode.CLIENT_STORAGE_DISABLED,\n          );\n        }\n      }\n      return { code: ExportResultCode.FAILED, error: ex };\n    }\n  }\n\n  /**\n   * Disable collection of statsbeat metrics after max failures\n   */\n  private incrementStatsbeatFailure(): void {\n    this.statsbeatFailureCount++;\n    if (this.statsbeatFailureCount > MAX_STATSBEAT_FAILURES) {\n      this.shutdownStatsbeat();\n    }\n  }\n\n  /**\n   * Shutdown statsbeat metrics\n   */\n  private shutdownStatsbeat(): void {\n    if (this.networkStatsbeatMetrics) {\n      this.networkStatsbeatMetrics.shutdown();\n    }\n    if (this.longIntervalStatsbeatMetrics) {\n      this.longIntervalStatsbeatMetrics?.shutdown();\n    }\n    if (this.customerStatsbeatMetrics) {\n      this.customerStatsbeatMetrics.shutdown();\n    }\n    this.statsbeatFailureCount = 0;\n  }\n\n  private async sendFirstPersistedFile(): Promise<void> {\n    const envelopes = (await this.persister.shift()) as Envelope[] | null;\n    try {\n      if (envelopes) {\n        await this.send(envelopes);\n      }\n    } catch (err: any) {\n      if (!this.isStatsbeatSender) {\n        this.networkStatsbeatMetrics?.countReadFailure();\n      }\n      diag.warn(`Failed to fetch persisted file`, err);\n    }\n  }\n\n  private isRetriableRestError(error: RestError): boolean {\n    const restErrorTypes: string[] = Object.values(RetriableRestErrorTypes);\n    if (error && error.code && restErrorTypes.includes(error.code)) {\n      return true;\n    }\n    return false;\n  }\n}\n"]}